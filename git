#!/bin/bash
#
# Start git in docker and use it like a installed binary.

function errexit() {
  echo "$@" >&2
  exit 1
}

# Find the root of the current git-repo, you are inside.
#
# Custom implementation, because "git rev-parse --show-toplevel"
# does not work without installed git. And we should not expect
# user has git installed.
function search_and_set_git_root() {
  # Exit, if in root directory
  if [ $(pwd) == "/" ]; then
    errexit "fatal: Not a git repository (or any of the parent directories): .git"
  fi;

  # Set GIT_ROOT, if ".git"-directory exists,
  # otherwise try again in parent directory.
  if [ ! -d ".git" ]; then
    cd ..
    search_and_set_git_root
  else
    GIT_ROOT=$(pwd)
  fi;
}

# Check if the current command given to git should only be performed within
# an existing repository.
function set_need_existing_repo() {
  # Default: Expect, that the git-command needs to be
  # performed inside of an existing git repository.
  NEEDS_REPO=true
  local non_repo_args=("init" "clone")
  for element in ${non_repo_args[@]}; do
    # if at least one argument is given and is in non_repo_args
    # then the command does not need an existing git repository.
    if [ ! -z ${1+x} ] && [ "$element" == "$1" ]; then
      NEEDS_REPO=false
    fi;
  done;
}

# Check if necessary ENV variables are set or exit with errormessage.
if [ -z "$GIT_EMAIL" ] || [ -z "$GIT_NAME" ]; then
  errexit "Please provide environment variable \"GIT_NAME\" and \"GIT_EMAIL\"."
fi;

set_need_existing_repo $1
if [ "$NEEDS_REPO" = true ]; then
  search_and_set_git_root
else
  GIT_ROOT=$(pwd)
fi;

# Run git in docker if all prerequisites are met.
docker run -it --rm \
  -e "GIT_COMMITTER_NAME=$GIT_NAME" \
  -e "GIT_AUTHOR_NAME=$GIT_NAME" \
  -e "GIT_COMMITTER_EMAIL=$GIT_EMAIL" \
  -e "GIT_AUTHOR_EMAIL=$GIT_EMAIL" \
  -v $GIT_ROOT:/root/workspace \
  axeclbr/git "$@"
